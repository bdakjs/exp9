from __future__ import print_function

import os
os.environ["HADOOP_HOME"] = "/home/hadoop/hadoop2"
os.environ["SPARK_HOME"] = "/home/hadoop/spark-2.3.1-bin-hadoop2.7"

import findspark
findspark.init()

import re
import sys
from operator import add

from pyspark.sql import SparkSession

def computeContribs(urls, rank):
    
    num_urls = len(urls)
    for url in urls:
        yield (url, rank / num_urls)


def parseNeighbors(urls):
    
    parts = re.split(r'\s+', urls)
    return parts[0], parts[1]


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: pagerank  ", file=sys.stderr)
        sys.exit(-1)

       spark = SparkSession\
        .builder\
        .appName("PythonPageRank")\
        .getOrCreate()

       lines = spark.read.text(sys.argv[1]).rdd.map(lambda r: r[0])

       links = lines.map(lambda urls: parseNeighbors(urls)).distinct().groupByKey().cache()
       print(links.count())
    n = links.count()


       ranks = links.map(lambda url_neighbors: (url_neighbors[0], 1))
  
    for iteration in range(int(sys.argv[2])):
        
        contribs = links.join(ranks).flatMap(
            lambda url_urls_rank: computeContribs(url_urls_rank[1][0], url_urls_rank[1][1]))

        
        ranks = contribs.reduceByKey(add).mapValues(lambda rank: rank * 0.85 + 0.15)

    
    for (link, rank) in ranks.collect():
        print("%s has rank: %s." % (link, rank))

    spark.stop()
test.txt
A B
C A
A C
B C